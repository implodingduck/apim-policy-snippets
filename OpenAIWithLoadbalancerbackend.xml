<policies>
    <inbound>
        <base />
        <set-backend-service backend-id="openaitz4a0hvb-pool" />
        <set-variable name="requestBody" value="@(context.Request.Body.As<string>(preserveContent: true))" />
        <!--<log-to-eventhub logger-id="ehlogger" partition-id="0">@{
            var body = context.Request.Body?.As<string>(true);
            if (body != null && body.Length > 1024)
            {
                body = body.Substring(0, 1024);
            }

            var headers = context.Request.Headers
                                .Where(h => h.Key != "Authorization" && h.Key != "Ocp-Apim-Subscription-Key" && h.Key != "api-key")
                                .Select(h => string.Format("{0}: {1}", h.Key, String.Join(", ", h.Value)))
                                .ToArray<string>();
            var requestIdHeader = context.Request.Headers.GetValueOrDefault("Request-Id", "");
            return new JObject(
                new JProperty("Type", "request"),
                new JProperty("Headers", headers),
                new JProperty("EventTime", DateTime.UtcNow.ToString()),
                new JProperty("ServiceName", context.Deployment.ServiceName),
                new JProperty("requestIdHeader", requestIdHeader),
                new JProperty("RequestId", context.RequestId),
                new JProperty("RequestIp", context.Request.IpAddress),
                new JProperty("RequestMethod", context.Request.Method),
                new JProperty("RequestPath", context.Request.Url.Path),
                new JProperty("RequestQuery", context.Request.Url.QueryString),
                new JProperty("RequestBody", body),
                new JProperty("OperationName", context.Operation.Name),
                new JProperty("OperationMethod", context.Operation.Method),
                new JProperty("OperationUrl", context.Operation.UrlTemplate),
                new JProperty("ApiName", context.Api.Name),
                new JProperty("ApiPath", context.Api.Path),
                new JProperty("Subscriber", context.Subscription.Id)
            ).ToString();
            
        }</log-to-eventhub>-->
        <set-variable name="counter" value="@{return 0;}" />
    </inbound>
    <backend>
        <retry condition="@(context.Response.StatusCode > 400)" count="3" interval="1" max-interval="45" delta="1" first-fast-retry="false">
            <choose>
                <when condition="@(context.Response.StatusCode > 400)">
                    <log-to-eventhub logger-id="ehlogger" partition-id="0">@{
                        var headers = context.Response.Headers
                                                    .Select(h => string.Format("{0}: {1}", h.Key, String.Join(", ", h.Value)))
                                                    .ToArray<string>();

                        return new JObject(
                            new JProperty("Type", "retry"),
                            new JProperty("Headers", headers),
                            new JProperty("ResponseStatusCode", context.Response.StatusCode),
                            new JProperty("ResponseStatusReason", context.Response.StatusReason),
                            new JProperty("EventTime", DateTime.UtcNow.ToString()),
                            new JProperty("counter", context.Variables.GetValueOrDefault<int>("counter"))
                        ).ToString();
                    }</log-to-eventhub>
                </when>
                <otherwise>
                    <!-- do nothing -->
                </otherwise>
            </choose>
            <set-variable name="counter" value="@{return (context.Variables.GetValueOrDefault<int>("counter") + 1);}" />
            <set-body>@((String)context.Variables["requestBody"])</set-body>
            <forward-request buffer-response="false" />
        </retry>
    </backend>
    <outbound>
        <base />
        <log-to-eventhub logger-id="ehlogger" partition-id="1">@{

            var body = "";
            var headers = context.Response.Headers
                                            .Select(h => string.Format("{0}: {1}", h.Key, String.Join(", ", h.Value)))
                                            .ToArray<string>();

            var respContentType = context.Response.Headers.GetValueOrDefault("Content-Type", "");
            if( respContentType.Equals("text/event-stream") ){
                body = "streaming";
            }else{
                body = "not-streaming";
                
            }
            var requestIdHeader = context.Request.Headers.GetValueOrDefault("Request-Id", "");
            var requestBody = "";

            return new JObject(
                new JProperty("Type", "response"),
                new JProperty("Headers", headers),
                new JProperty("EventTime", DateTime.UtcNow.ToString()),
                new JProperty("ServiceName", context.Deployment.ServiceName),
                new JProperty("requestIdHeader", requestIdHeader),
                new JProperty("RequestId", context.RequestId),
                new JProperty("RequestIp", context.Request.IpAddress),
                new JProperty("RequestMethod", context.Request.Method),
                new JProperty("ResponseStatusCode", context.Response.StatusCode),
                new JProperty("ResponseStatusReason", context.Response.StatusReason),
                new JProperty("responseBody", body),
                new JProperty("OperationName", context.Operation.Name),
                new JProperty("OperationMethod", context.Operation.Method),
                new JProperty("OperationUrl", context.Operation.UrlTemplate),
                new JProperty("ApiName", context.Api.Name),
                new JProperty("ApiPath", context.Api.Path),
                new JProperty("Subscriber", context.Subscription.Id),
                new JProperty("RequestBody", requestBody),
                new JProperty("Duration", context.Elapsed),
                new JProperty("counter", context.Variables.GetValueOrDefault<int>("counter"))
            ).ToString();
            
        }</log-to-eventhub>
    </outbound>
    <on-error>
        <base />
        <log-to-eventhub logger-id="ehlogger" partition-id="1">@{
            var requestIdHeader = context.Request.Headers.GetValueOrDefault("Request-Id", "");
            var responseBody = context.Response.Body?.As<string>(true);
            return new JObject(
                new JProperty("Type", "error"),
                new JProperty("EventTime", DateTime.UtcNow.ToString()),
                new JProperty("ServiceName", context.Deployment.ServiceName),
                new JProperty("requestIdHeader", requestIdHeader),
                new JProperty("RequestId", context.RequestId),
                new JProperty("RequestIp", context.Request.IpAddress),
                new JProperty("LastErrorMessage", context.LastError.Message),
                new JProperty("OperationName", context.Operation?.Name),
                new JProperty("OperationMethod", context.Operation?.Method),
                new JProperty("OperationUrl", context.Operation?.UrlTemplate),
                new JProperty("ApiName", context.Api.Name),
                new JProperty("ApiPath", context.Api.Path),
                new JProperty("Subscriber", context.Subscription.Id),
                new JProperty("Duration", context.Elapsed),
                new JProperty("ResponseStatusCode", context.Response?.StatusCode),
                new JProperty("ResponseStatusReason", context.Response?.StatusReason),
                new JProperty("responseBody", responseBody)
            ).ToString();
        }</log-to-eventhub>
    </on-error>
</policies>
<!--
    - Policies are applied in the order they appear.
    - Position <base/> inside a section to inherit policies from the outer scope.
    - Comments within policies are not preserved.
-->
<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->
<policies>
    <!-- Throttle, authorize, validate, cache, or transform the requests -->
    <inbound>
        <base />
        <validate-azure-ad-token tenant-id="{{TENANT_ID}}" output-token-variable-name="usersjwttoken">
            <audiences>
                <audience>{{CLIENT_ID}}</audience>
            </audiences>
        </validate-azure-ad-token>
    </inbound>
    <!-- Control if and how the requests are forwarded to services  -->
    <backend>
        <base />
    </backend>
    <!-- Customize the responses -->
    <outbound>
        <base />
        <set-header name="x-usersjwttoken-id" exists-action="override">
            <value>@{
                var jwt = (Jwt)context.Variables["usersjwttoken"]; 
                return jwt.Id;
            }</value>
        </set-header>
        <set-header name="x-usersjwttoken" exists-action="override">
            <value>@{
                var jwt = (Jwt)context.Variables["usersjwttoken"]; 
                return new JObject(
                    new JProperty("Algorithm", jwt.Algorithm),
                    new JProperty("Audiences", jwt.Audiences.ToArray<string>()),
                    new JProperty("Claims", jwt.Claims.Where(h => true)
                                .Select(h => string.Format("{0}: {1}", h.Key, String.Join(", ", h.Value)))
                                .ToArray<string>()),
                    new JProperty("ExpirationTime", jwt.ExpirationTime),
                    new JProperty("Id", jwt.Id),
                    new JProperty("Issuer", jwt.Issuer),
                    new JProperty("IssuedAt", jwt.IssuedAt),
                    new JProperty("NotBefore", jwt.NotBefore),
                    new JProperty("Subject", jwt.Subject),
                    new JProperty("Type", jwt.Type)

                ).ToString(Newtonsoft.Json.Formatting.None);
            }</value>
        </set-header>
    </outbound>
    <!-- Handle exceptions and customize error responses  -->
    <on-error>
        <base />
    </on-error>
</policies>

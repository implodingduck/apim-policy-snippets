<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <set-variable name="ipallowed" value="@{
                System.Net.IPAddress lowerbounds = System.Net.IPAddress.Parse("10.0.0.0");
                byte[] lowerbytes = lowerbounds.GetAddressBytes();

                System.Net.IPAddress upperbounds = System.Net.IPAddress.Parse("10.255.255.255");
                byte[] upperbytes = upperbounds.GetAddressBytes();

                String[] xff = context.Request?.Headers?["X-Forwarded-For"];
                String ripstr = xff[0].Split(":".ToCharArray())[0];

                System.Net.IPAddress rip = System.Net.IPAddress.Parse(ripstr);
                byte[] ripbytes = rip.GetAddressBytes();

                var retval = true;
                if(rip.AddressFamily != lowerbounds.AddressFamily
                || rip.AddressFamily != upperbounds.AddressFamily)
            {
                retval = false;
            }


            bool lowerBoundary = true;
            bool upperBoundary = true;
            for (int i = 0; (i < lowerbytes.Length) && (lowerBoundary || upperBoundary); i++)
            {
                if ((lowerBoundary && ripbytes[i] < lowerbytes[i]) ||
                (upperBoundary && ripbytes[i] > upperbytes[i]))
                {
                    retval = false;
                }

                lowerBoundary &= (ripbytes[i] == lowerbytes[i]);
                upperBoundary &= (ripbytes[i] == upperbytes[i]);
            }
                
                //return retval + "|" + ripstr + "|" + lowerbounds.ToString() + "|" + upperbounds.ToString();
                return retval;
        }" />
        <choose>
            <when condition="@(!context.Variables.GetValueOrDefault<Boolean>("ipallowed"))">
                <return-response>
                    <set-status code="404" reason="NotFound" />
                    <set-body>This is not the API you are looking for</set-body>
                </return-response>
            </when>
            <otherwise />
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
        <set-header name="X-XFF-INRANGE" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault<Boolean>("ipallowed").ToString())</value>
        </set-header>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>